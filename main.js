/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.styleEl = document.createElement("style");
    this.styleEl.innerHTML = `
				.HyperMD-task-line[data-task="x"],
				.HyperMD-task-line[data-task="x"] ~ .cm-line.cm-indent-1,
				.HyperMD-task-line[data-task="x"] ~ .cm-line.cm-indent-2,
				.HyperMD-task-line[data-task="x"] ~ .cm-line.cm-indent-3 {
						display: none!important;
				}
			`;
    if (this.settings.autoHide) {
      this.show();
    }
    this.addSettingTab(new MySetting(this.app, this));
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  show() {
    document.head.appendChild(this.styleEl);
  }
  hide() {
    if (this.styleEl) {
      document.head.removeChild(this.styleEl);
    }
  }
  onunload() {
    this.hide();
  }
  async loadSettings() {
    this.settings = Object.assign(
      { autoHide: true },
      await this.loadData()
    );
  }
};
var MySetting = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u5B8C\u6210\u9690\u85CF").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.autoHide);
      toggle.onChange((bool) => {
        this.plugin.settings.autoHide = bool;
        this.plugin.saveSettings();
        bool ? this.plugin.show() : this.plugin.hide();
      });
    });
  }
};
